{"version":3,"sources":["Components/Header.jsx","context/GlobalState.js","Components/Balance.jsx","Components/IncomeExpenses.jsx","Components/Transaction.js","Components/TransactionList.jsx","Components/AddTransaction.jsx","App.js","index.js"],"names":["Header","Fragment","className","initialState","transactions","id","first_name","last_name","email","amount","text","AppReducer","state","action","type","filter","transaction","payload","GlobalContext","createContext","GlobalProvider","children","useReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","reduce","currentValue","toFixed","AccountSummary","amounts","income","acc","expense","Transaction","sign","Math","abs","onClick","TransactionList","AddTransaction","useState","setText","setAmount","onSubmit","event","preventDefault","newTransaction","floor","random","htmlFor","placeholder","onChange","target","name","App","IncomeExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f4cbd10.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header (){\n    return(\n        <React.Fragment>\n            <div className=\"headerdivision\">\n            <h1 className=\"header\">Expense Trekker</h1>\n            \n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Header;","import React,{ createContext, useReducer } from \"react\";\n\nconst initialState = {\n    transactions :[\n        {id:1 ,first_name:\"Tomasine\",last_name:\"Sher\", email:\"tsher0@ow.ly\" ,amount:413.75 ,text:\"Pepper Squash\"},\n        {id:2 ,first_name:\"Jasmine\",last_name:\"Sherry\", email:\"hello0@ow.ly\" ,amount:-43,text:\"ChilliSauce\"},\n        {id:3 ,first_name:\"Honeye\",last_name:\"Camry\", email:\"nice@ow.ly\" ,amount:75 ,text:\"Hersheys Kisses\"},\n        {id:4 ,first_name:\"Joseph\",last_name:\"Elene\", email:\"due@ow.ly\" ,amount:330 ,text:\"Salt\"},\n        {id:5 ,first_name:\"John\",last_name:\"Jerry\", email:\"christoph@ow.ly\" ,amount: -125 ,text:\"RanchSauce\"},\n        ]\n}\n\n//After adding dispatch update the reducer\n\nexport const AppReducer = (state, action) => {\n    switch(action.type){\n        case \"DELETE_tRANSACTION\": \n        return{\n            ...state,\n            transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\n        }\n\n        case \"ADD_tRANSACTION\": \n        return{\n            ...state,\n            transactions : [action.payload, ...state.transactions]\n        }\n        default: \n        return state;\n    }\n    \n}\n\n//Creating Context\n\nexport const GlobalContext = createContext(initialState);\n\n\n//Creating Provider to wrap children up in the App component\n\n//Later add dispatch to the Global provider\nexport const GlobalProvider = ({children}) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    const deleteTransaction =(id)=>{\n        dispatch({\n            type: \"DELETE_tRANSACTION\",\n            payload: id\n        });\n    }\n\n    const addTransaction =(transaction)=>{\n        dispatch({\n            type: \"ADD_tRANSACTION\",\n            payload: transaction\n        });\n    }\n\n    return(\n            <GlobalContext.Provider\n            value={{transactions : state.transactions,\n            deleteTransaction,\n            addTransaction}}>\n            {children}\n            </GlobalContext.Provider>\n            );\n\n}","import React, { useContext} from \"react\";\nimport {GlobalContext} from \"../context/GlobalState\";\n\n\n\nconst Balance = () => {\n    const {transactions} = useContext(GlobalContext);\n\n    const amounts = transactions.map(transaction =>(transaction.amount));\n\n    const total = amounts.reduce((total,currentValue)=> (total = total + currentValue),0).toFixed(3);\n    return(\n            <div>\n                <h4>Your Balance</h4>\n                <h1 id=\"balance\">+${total}</h1>\n            </div>\n    )\n}\n\nexport default Balance;","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\nfunction AccountSummary (){\n    const { transactions} = useContext(GlobalContext);\n\n    const amounts = transactions.map(transaction => (transaction.amount));\n\n    const income = amounts\n            .filter(currentValue=> currentValue > 0)\n            .reduce((acc,currentValue) => ( acc + currentValue),0)\n            .toFixed(3);\n\n    const expense = amounts\n                .filter(currentValue=> currentValue < 0)\n                .reduce((acc,currentValue) => ( acc + currentValue),0)* -1\n                .toFixed(3);\n\n\n    return(\n        <React.Fragment>\n            <div className=\"income_expense_calculator\">\n            <div>\n                <h4>Income</h4>\n                <p className=\"money plus\">${income}</p>\n            </div>\n\n            <div>\n                <h4>Expense</h4>\n                <p className=\"money minus\">-${expense}</p>\n            </div>\n\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default AccountSummary;","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\n\n const Transaction = ({transaction})=> {\n    const {deleteTransaction} = useContext(GlobalContext);\n\n    const deleteTransactionFunction =()=>{\n        deleteTransaction(transaction.id);\n    }\n\n\n    const sign = transaction.amount < 0 ? '-': '+';\n\n\n    // Dynamically converting color of our buttons - green for plus, red for minus--how?\n\n    return(\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n        {transaction.text}<span>{sign}${Math.abs(transaction.amount)}</span> \n        <button onClick={deleteTransactionFunction} className=\"delete_btn\">X</button>\n\n        </li>\n        \n        );\n\n}\n\nexport default Transaction;","import React, { useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\nimport Transaction from \"../Components/Transaction\";\n\n\n\n\n\nconst TransactionList = () => {\n    const {transactions} = useContext(GlobalContext);\n\n    return(\n        <React.Fragment>\n            <h3>History</h3>\n            <ul className=\"list\">\n                {transactions.map(transaction =>(\n                    <Transaction key={transaction.id} transaction={transaction} />\n                ))}\n            </ul>\n        </React.Fragment>\n    )\n}\n\nexport default TransactionList;","import React, { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../context/GlobalState\";\n\n\n\nconst AddTransaction = () => {\n    //making two states - one each for each input field.\n\n    const [text, setText] = useState(\"\");\n    const [amount, setAmount] = useState(0);\n\n    const { addTransaction } = useContext(GlobalContext);\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n    const newTransaction = {\n        id: Math.floor(Math.random() * 100000000),\n        text : text,\n        amount : +amount\n    }\n    addTransaction(newTransaction);\n} \n\n\n    const textChange=(event)=>{\n        setText(event.target.value);\n    }\n\n    const amountChange=(event)=>{\n        setAmount(event.target.value);\n    }\n    return(\n        <div>\n        <h3> Add new transaction</h3>\n            <form id=\"form\" onSubmit={onSubmit}>\n            <div className=\"form_control\">\n                <label htmlFor=\"text\">Text</label>\n                <input \n                id=\"text\" \n                type=\"text\" \n                placeholder=\"Enter text here...\"\n                value={text}\n                onChange={textChange}\n                name=\"text\"   \n                />\n            </div>\n\n            <div className=\"form_control\">\n                <label htmlFor=\"amount\"> Amount <br /> (negative -expense),(positive - income) </label>\n                <input \n                type=\"number\" \n                id=\"amount\" \n                placeholder=\"Amount here ...\"\n                value={amount}\n                onChange={amountChange}\n                name=\"amount\"\n                />\n            </div>\n                <button className=\"btn\"> Add Transaction </button>\n            </form>\n        </div>\n    )\n}\n\nexport default AddTransaction;","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Balance from \"./Components/Balance\";\nimport IncomeExpenses from \"./Components/IncomeExpenses\";\nimport TransactionList from \"./Components/TransactionList\";\nimport AddTransaction from \"./Components/AddTransaction\";\nimport { GlobalProvider } from \"./context/GlobalState\";\n\n\n\nconst App = () => {\nreturn(\n        <GlobalProvider>\n            \n              <Header />\n                    <div  className=\"container\">\n                        <Balance />\n                        <IncomeExpenses />\n                        <TransactionList />\n                        <AddTransaction />\n                    </div>\n           \n          </GlobalProvider>\n)\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />,document.getElementById(\"root\"));"],"sourceRoot":""}